syntax = "proto3";

import "google/api/annotations.proto";
//import "google/protobuf/field_mask.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "gogoproto/gogo.proto";


option go_package = "proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Reservation System API";
        description: "go-kit gRPC-gateway Reservation System Demo Application";
        version: "1.0";
        contact: {
            name: "Tsvetan Dimitrov";
            email: "tsvetan.dimitrov23@gmail.com";
        };
        license: {
            name: "Apache 2.0";
            url: "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    };
    external_docs: {
        url: "https://github.com/powerslider/go-kit-grpc-gw-reservation-system-demo";
        description: "go-kit gRPC-gateway Reservation System Demo Application";
    };
    schemes: HTTP;
    host: "localhost:8081";
};

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;


message Customer {
    int64 customer_id = 1;
    string first_name = 2;
    string last_name = 3;
    string email = 4;
    string phone = 5;
    int64 created = 6;
    int64 last_updated = 7;
}

message GetAllCustomersRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

message GetAllCustomersResponse {
    repeated Customer customers = 1 [(gogoproto.nullable) = false];
    string err = 2;
}

message GetCustomerByIDRequest {
    int64 customer_id = 1;
}

message GetCustomerByIDResponse {
    Customer customer = 1;
    string err = 2;
}

message RegisterCustomerRequest {
    Customer customer = 1;
}

message RegisterCustomerResponse {
    Customer customer = 1;
    string err = 2;
}

message UnregisterCustomerRequest {
    int64 customer_id = 1;
}

message UnregisterCustomerResponse {
    string err = 1;
}

service CustomerService {
    rpc RegisterCustomer (RegisterCustomerRequest) returns (RegisterCustomerResponse) {
        option (google.api.http) = {
			post: "/customer"
			body: "*"
		};
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Register a new Customer"
            description: "Register a new Customer"
            tags: "customer"
        };
    };
    rpc UnregisterCustomer (UnregisterCustomerRequest) returns (UnregisterCustomerResponse) {
        option (google.api.http) = {
			delete: "/customer/{customer_id}"
		};
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Unregister an existing customer"
            description: "Unregister an existing customer"
            tags: "customer"
        };
    }
    rpc GetAllCustomers (GetAllCustomersRequest) returns (GetAllCustomersResponse) {
        option (google.api.http) = {
			get: "/customers"
		};
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "List existing customers"
            description: "List existing customers"
            tags: "customer"
        };
    }
    rpc GetCustomerByID (GetCustomerByIDRequest) returns (GetCustomerByIDResponse) {
        option (google.api.http) = {
			get: "/customer/{customer_id}"
		};
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Get an existing customer"
            description: "Get an existing customer"
            tags: "customer"
        };
    }
}


message Reservation {
    int64 reservation_id = 1;
    int64 seat_count = 2;
    string start_time = 3;
    string reservation_name = 4;
    int64 customer_id = 5;
    string phone = 6;
    string comments = 7;
    int64 created = 8;
    int64 last_updated = 9;
}

message BookReservationRequest {
    int64 customer_id = 1;
    Reservation reservation = 2;
}

message BookReservationResponse {
    Reservation reservation = 1;
    string err = 2;
}

message DiscardReservationRequest {
    int64 reservation_id = 1;
}

message DiscardReservationResponse {
    string err = 1;
}

//message EditReservationRequest {
//    int64 reservation_id = 1;
//    Reservation reservation = 2;
//    // The update mask applies to the resource. For the `FieldMask` definition,
//    // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
//    google.protobuf.FieldMask update_mask = 3;
//}
//
//message EditReservationResponse {
//    Reservation reservation = 1;
//    string err = 2;
//}

message GetReservationHistoryPerCustomerRequest {
    int64 customer_id = 1;
    uint64 limit = 2;
    uint64 offset = 3;
}

message GetReservationHistoryPerCustomerResponse {
    repeated Reservation reservations = 1 [(gogoproto.nullable) = false];
    string err = 2;
}

service ReservationService {
    rpc BookReservation (BookReservationRequest) returns (BookReservationResponse) {
        option (google.api.http) = {
			post: "/customer/{customer_id}/reservation"
			body: "*"
		};
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Book a new Reservation"
            description: "Book a new Reservation"
            tags: "reservation"
        };
    }
    rpc DiscardReservation (DiscardReservationRequest) returns (DiscardReservationResponse) {
        option (google.api.http) = {
			delete: "/reservation/{reservation_id}"
		};
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "Discard an existing reservation"
            description: "Discard an existing reservation"
            tags: "reservation"
        };
    }
//    rpc EditReservation (EditReservationRequest) returns (EditReservationResponse) {
//        option (google.api.http) = {
//			put: "/reservation/{reservation_id}"
//			body: "reservation"
//			additional_bindings: [
//			    {
//			        patch: "/reservation/{reservation_id}"
//			        body: "reservation"
//			    },
//			    {
//			        patch: "/reservation/{reservation_id}"
//			        body: "*"
//                }
//			]
//		};
//        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
//            summary: "Edit an existing reservation"
//            description: "Edit an existing reservation"
//            tags: "reservation"
//        };
//    }
    rpc GetReservationHistoryPerCustomer (GetReservationHistoryPerCustomerRequest) returns (GetReservationHistoryPerCustomerResponse) {
        option (google.api.http) = {
			get: "/customer/{customer_id}/reservations"
		};
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            summary: "List existing reservations per customer ordered by newest."
            description: "List existing reservations per customer ordered by newest."
            tags: "reservation"
        };
    }
}