// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...grpc.CallOption) (*RegisterCustomerResponse, error)
	UnregisterCustomer(ctx context.Context, in *UnregisterCustomerRequest, opts ...grpc.CallOption) (*UnregisterCustomerResponse, error)
	GetAllCustomers(ctx context.Context, in *GetAllCustomersRequest, opts ...grpc.CallOption) (*GetAllCustomersResponse, error)
	GetCustomerByID(ctx context.Context, in *GetCustomerByIDRequest, opts ...grpc.CallOption) (*GetCustomerByIDResponse, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...grpc.CallOption) (*RegisterCustomerResponse, error) {
	out := new(RegisterCustomerResponse)
	err := c.cc.Invoke(ctx, "/CustomerService/RegisterCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UnregisterCustomer(ctx context.Context, in *UnregisterCustomerRequest, opts ...grpc.CallOption) (*UnregisterCustomerResponse, error) {
	out := new(UnregisterCustomerResponse)
	err := c.cc.Invoke(ctx, "/CustomerService/UnregisterCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetAllCustomers(ctx context.Context, in *GetAllCustomersRequest, opts ...grpc.CallOption) (*GetAllCustomersResponse, error) {
	out := new(GetAllCustomersResponse)
	err := c.cc.Invoke(ctx, "/CustomerService/GetAllCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerByID(ctx context.Context, in *GetCustomerByIDRequest, opts ...grpc.CallOption) (*GetCustomerByIDResponse, error) {
	out := new(GetCustomerByIDResponse)
	err := c.cc.Invoke(ctx, "/CustomerService/GetCustomerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations should embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	RegisterCustomer(context.Context, *RegisterCustomerRequest) (*RegisterCustomerResponse, error)
	UnregisterCustomer(context.Context, *UnregisterCustomerRequest) (*UnregisterCustomerResponse, error)
	GetAllCustomers(context.Context, *GetAllCustomersRequest) (*GetAllCustomersResponse, error)
	GetCustomerByID(context.Context, *GetCustomerByIDRequest) (*GetCustomerByIDResponse, error)
}

// UnimplementedCustomerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) RegisterCustomer(context.Context, *RegisterCustomerRequest) (*RegisterCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) UnregisterCustomer(context.Context, *UnregisterCustomerRequest) (*UnregisterCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) GetAllCustomers(context.Context, *GetAllCustomersRequest) (*GetAllCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomers not implemented")
}
func (UnimplementedCustomerServiceServer) GetCustomerByID(context.Context, *GetCustomerByIDRequest) (*GetCustomerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByID not implemented")
}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_RegisterCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).RegisterCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerService/RegisterCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).RegisterCustomer(ctx, req.(*RegisterCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UnregisterCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UnregisterCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerService/UnregisterCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UnregisterCustomer(ctx, req.(*UnregisterCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetAllCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetAllCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerService/GetAllCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetAllCustomers(ctx, req.(*GetAllCustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerService/GetCustomerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerByID(ctx, req.(*GetCustomerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCustomer",
			Handler:    _CustomerService_RegisterCustomer_Handler,
		},
		{
			MethodName: "UnregisterCustomer",
			Handler:    _CustomerService_UnregisterCustomer_Handler,
		},
		{
			MethodName: "GetAllCustomers",
			Handler:    _CustomerService_GetAllCustomers_Handler,
		},
		{
			MethodName: "GetCustomerByID",
			Handler:    _CustomerService_GetCustomerByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/models.proto",
}

// ReservationServiceClient is the client API for ReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationServiceClient interface {
	BookReservation(ctx context.Context, in *BookReservationRequest, opts ...grpc.CallOption) (*BookReservationResponse, error)
	DiscardReservation(ctx context.Context, in *DiscardReservationRequest, opts ...grpc.CallOption) (*DiscardReservationResponse, error)
	//    rpc EditReservation (EditReservationRequest) returns (EditReservationResponse) {
	//        option (google.api.http) = {
	//			put: "/reservation/{reservation_id}"
	//			body: "reservation"
	//			additional_bindings: [
	//			    {
	//			        patch: "/reservation/{reservation_id}"
	//			        body: "reservation"
	//			    },
	//			    {
	//			        patch: "/reservation/{reservation_id}"
	//			        body: "*"
	//                }
	//			]
	//		};
	//    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	//            summary: "Edit an existing reservation"
	//            description: "Edit an existing reservation"
	//            tags: "reservation"
	//        };
	//    }
	GetReservationHistoryPerCustomer(ctx context.Context, in *GetReservationHistoryPerCustomerRequest, opts ...grpc.CallOption) (*GetReservationHistoryPerCustomerResponse, error)
}

type reservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationServiceClient(cc grpc.ClientConnInterface) ReservationServiceClient {
	return &reservationServiceClient{cc}
}

func (c *reservationServiceClient) BookReservation(ctx context.Context, in *BookReservationRequest, opts ...grpc.CallOption) (*BookReservationResponse, error) {
	out := new(BookReservationResponse)
	err := c.cc.Invoke(ctx, "/ReservationService/BookReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) DiscardReservation(ctx context.Context, in *DiscardReservationRequest, opts ...grpc.CallOption) (*DiscardReservationResponse, error) {
	out := new(DiscardReservationResponse)
	err := c.cc.Invoke(ctx, "/ReservationService/DiscardReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetReservationHistoryPerCustomer(ctx context.Context, in *GetReservationHistoryPerCustomerRequest, opts ...grpc.CallOption) (*GetReservationHistoryPerCustomerResponse, error) {
	out := new(GetReservationHistoryPerCustomerResponse)
	err := c.cc.Invoke(ctx, "/ReservationService/GetReservationHistoryPerCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServiceServer is the server API for ReservationService service.
// All implementations should embed UnimplementedReservationServiceServer
// for forward compatibility
type ReservationServiceServer interface {
	BookReservation(context.Context, *BookReservationRequest) (*BookReservationResponse, error)
	DiscardReservation(context.Context, *DiscardReservationRequest) (*DiscardReservationResponse, error)
	//    rpc EditReservation (EditReservationRequest) returns (EditReservationResponse) {
	//        option (google.api.http) = {
	//			put: "/reservation/{reservation_id}"
	//			body: "reservation"
	//			additional_bindings: [
	//			    {
	//			        patch: "/reservation/{reservation_id}"
	//			        body: "reservation"
	//			    },
	//			    {
	//			        patch: "/reservation/{reservation_id}"
	//			        body: "*"
	//                }
	//			]
	//		};
	//    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	//            summary: "Edit an existing reservation"
	//            description: "Edit an existing reservation"
	//            tags: "reservation"
	//        };
	//    }
	GetReservationHistoryPerCustomer(context.Context, *GetReservationHistoryPerCustomerRequest) (*GetReservationHistoryPerCustomerResponse, error)
}

// UnimplementedReservationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReservationServiceServer struct {
}

func (UnimplementedReservationServiceServer) BookReservation(context.Context, *BookReservationRequest) (*BookReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookReservation not implemented")
}
func (UnimplementedReservationServiceServer) DiscardReservation(context.Context, *DiscardReservationRequest) (*DiscardReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardReservation not implemented")
}
func (UnimplementedReservationServiceServer) GetReservationHistoryPerCustomer(context.Context, *GetReservationHistoryPerCustomerRequest) (*GetReservationHistoryPerCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservationHistoryPerCustomer not implemented")
}

// UnsafeReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServiceServer will
// result in compilation errors.
type UnsafeReservationServiceServer interface {
	mustEmbedUnimplementedReservationServiceServer()
}

func RegisterReservationServiceServer(s grpc.ServiceRegistrar, srv ReservationServiceServer) {
	s.RegisterService(&ReservationService_ServiceDesc, srv)
}

func _ReservationService_BookReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).BookReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReservationService/BookReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).BookReservation(ctx, req.(*BookReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_DiscardReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).DiscardReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReservationService/DiscardReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).DiscardReservation(ctx, req.(*DiscardReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetReservationHistoryPerCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationHistoryPerCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetReservationHistoryPerCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReservationService/GetReservationHistoryPerCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetReservationHistoryPerCustomer(ctx, req.(*GetReservationHistoryPerCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservationService_ServiceDesc is the grpc.ServiceDesc for ReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReservationService",
	HandlerType: (*ReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookReservation",
			Handler:    _ReservationService_BookReservation_Handler,
		},
		{
			MethodName: "DiscardReservation",
			Handler:    _ReservationService_DiscardReservation_Handler,
		},
		{
			MethodName: "GetReservationHistoryPerCustomer",
			Handler:    _ReservationService_GetReservationHistoryPerCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/models.proto",
}
